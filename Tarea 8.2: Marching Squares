import numpy as np
import matplotlib.pyplot as plt
import cv2
import time
import collections  
Output = collections.defaultdict(int)

start_time = time.time()

def OTSU(wIm, hIm, imbnb, imnew):
    pxList=np.zeros(wIm*hIm)
    
    i=0
    for x in range(wIm):
        for y in range(hIm):
            pxList[i]=imbnb[x,y]
            i+=1
    length=len(pxList)
    
    freqList=np.histogram(pxList,256)
    pxMax=int(np.amax(pxList))
    var=[]
    for i in range(1,pxMax+1):
        vari=varianzaClases(pxMax+1,i,freqList,length)
        if not np.isnan(vari):
            var.append(vari)
        else:
            var.append(0)
      
    varMaxV=np.where(var==np.amax(var))
    varMax=int(np.mean(varMaxV))
    
    for x in range(wIm):
        for y in range(hIm):
            if imbnb[x,y]<varMax:
                imnew[x,y,:]=0
            else:
                imnew[x,y,:]=255
    
    print("OTSU DONE...")
    return imnew

# Funciones para OTSU
def P1(t,freqList,length):
    P_1=0
    for x in range(t):
        P_1+=(freqList[0][x])/length
    return P_1

def media(t,freqList,length):
    med=0
    for x in range(t):
        med+=x*(freqList[0][x])/length
    return med

def mediaGlobal(gmax,freqList,length):
    medGlobal=media(gmax,freqList,length)
    return medGlobal

def varianzaClases(gmax,t,freqList,length):
    mG=(mediaGlobal(gmax,freqList,length))
    p1=(P1(t,freqList,length))
    m=(media(t,freqList,length))
    try:
        varCl=np.divide((mG*p1-m)**2,(p1*(1-p1)))
    except:
        varCl=0
        print("Nan")
    return varCl
# Funciones para OTSU

def checkCel2(celda):
    switcher = {
        0: m0,
        1: m1,
        2: m2,
        3: m3,
        4: m4,
        5: m5,
        6: m6,
        7: m7,
        8: m7,
        9: m6,
        10: m10,
        11: m4,
        12: m3,
        13: m2,
        14: m1,
        15: m0
        }
    func = switcher.get(celda, lambda: "Invalid function")
    x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart=func()
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m0():
    x1=0
    y1=0
    x2=0
    y2=0
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m1():
    x1=0
    y1=1.5
    x2=0.5
    y2=2
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m2():
    x1=2
    y1=1.5
    x2=1.5
    y2=2
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m3():
    x1=1
    y1=0
    x2=1
    y2=2
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m4():
    x1=1.5
    y1=0
    x2=2
    y2=0.5
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m5():
    x1=1.5
    y1=0
    x2=2
    y2=0.5
    X1=0
    Y1=1.5
    X2=0.5
    Y2=2
    flagCelPart=True

    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m6():
    x1=0
    y1=1
    x2=2
    y2=1
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m7():
    x1=0.5
    y1=0
    x2=0
    y2=0.5
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m8():
    x1=0.5
    y1=0
    x2=0
    y2=0.5
    X1=0
    Y1=0
    X2=0
    Y2=0
    flagCelPart=False
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart

def m10():
    x1=0.5
    y1=0
    x2=0
    y2=0.5
    X1=2
    Y1=1.5
    X2=1.5
    Y2=2
    flagCelPart=True
    return x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart        

Ruta=""
imagen="celda1.png"


imbnb = cv2.imread(Ruta+imagen,0)
wIm, hIm = np.shape(imbnb)
imnew=np.zeros((wIm,hIm,3))
upS=2
thick=int((upS*np.amin((wIm,hIm)))/500)
if thick < 1: thick=1
print("Thickness: ",thick)
    
imnew=OTSU(wIm, hIm, imbnb, imnew)
imup = cv2.resize(imnew, None, (0,0), fx=upS, fy=upS, interpolation=cv2.INTER_NEAREST)
print("UPSAMPLING DONE...")

marchVec=[]

for y in range(0,(hIm-1),1):         
    for x in range(0,(wIm-1),1):
        celda=np.zeros((2,2))
        if y+1==hIm: yy=y
        else: yy=y+1
        if x+1==wIm: xx=x
        else: xx=x+1 
        celda[0,0]=imnew[x,y,0]
        celda[0,1]=imnew[x,yy,0]
        celda[1,0]=imnew[xx,y,0]
        celda[1,1]=imnew[xx,yy,0]

        celdaSum=int((8*celda[0,0]+4*celda[0,1]+2*celda[1,1]+celda[1,0])/255)
        
        x1,y1,x2,y2,X1,Y1,X2,Y2,flagCelPart=checkCel2(celdaSum)
        
        if x1+x2+y1+y2!=0:
            c11=(int(upS*(y+y1)),int(upS*(x+x1)))
            c12=(int(upS*(y+y2)),int(upS*(x+x2)))
            cv2.line(imup,c11,c12,(0,255,0),thickness=thick)
            if flagCelPart==True:
                flagCelPart==False
                c21=(int(upS*(y+Y1)),int(upS*(x+X1)))
                c22=(int(upS*(y+Y2)),int(upS*(x+X2)))
                cv2.line(imup,c21,c22,(0,255,0),thickness=thick)
        
plt.figure(figsize=(5*2, 5*2), constrained_layout=False)        
plt.subplot(2,2,1), plt.imshow(imnew)
plt.subplot(2,2,2), plt.imshow(imup)
imupN=imup/255
plt.imsave(imagen[-len(imagen):-3]+"-Bordes.png",imupN)
print("--- %s seconds ---" % (time.time() - start_time))       
        
